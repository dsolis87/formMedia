<?php
/**
 * Created by PhpStorm.
 * User: Administrador
 * Date: 28/05/2015
 * Time: 12:20 AM
 */

namespace DS\FormMediaBundle\Form\Type;


use DS\FormMediaBundle\Util\StringUtils;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormError;
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Form\FormView;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class MediaType extends AbstractType {

    const CACHE_PATH = 'bundles/mediabundle/cache/';
    protected $mediaService;
    protected $mediaUniqueName;
    protected $file;
    protected $fileMime;

    function __construct($mediaService)
    {
        $this->mediaService = $mediaService;
        $this->mediaUniqueName = uniqid('media_');
        if (!file_exists('bundles/mediabundle/cache')) {
            mkdir('bundles/mediabundle/cache', 0777, true);
        }

    }

    /**
     * Returns the name of this type.
     *
     * @return string The name of this type
     */
    public function getName()
    {
        return 'media';
    }

    public function getParent() {
        return 'file';
    }

    public function finishView(FormView $view, FormInterface $form, array $options)
    {
        parent::finishView($view, $form, $options); // TODO: Change the autogenerated stub
    }

    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults([
            'compound' => true,
        ]);
    }


    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder->add('media', 'file');

        $builder->add('media_unique_name', 'hidden', [
            'empty_data' => $this->mediaUniqueName,
        ]);

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
            $form = $event->getForm();
            $data = $event->getData();

            if (!StringUtils::contains($form->get('media_unique_name')->getData(), 'media_')) {
                $form->get('media')->addError(new FormError('Invalid media token'));
            }
        });

        $builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
            $form = $event->getForm();
            $file = $form->get('media')->getData();

            $cachedFileName = self::CACHE_PATH . $form->get('media_unique_name')->getData();

            if ($file != null && $file->getError() == 0) {
                // Se guarda el archivo temporal


                $handler = fopen($cachedFileName, 'w+');
                fwrite($handler, base64_encode(file_get_contents($file)));
                $this->file = fread($handler, filesize($cachedFileName));
                fclose($handler);
                $handler = fopen($cachedFileName, 'r');
                $this->file = fread($handler, filesize($cachedFileName));
                fclose($handler);
            }
            elseif (file_exists($cachedFileName)) {
                $handler = fopen($cachedFileName, 'r');

                $this->file = fread($handler, filesize($cachedFileName));

                fclose($handler);

                $form->get('media')->addError(new FormError('El archivo que intenta subir es inválido o supera el tamaño máximo permitido.'));
            }
        });
    }

    public function buildView(FormView $view, FormInterface $form, array $options)
    {
        parent::buildView($view, $form, $options);

        $thumb = $this->mediaService->thumbCreate($this->file, $this->fileMime);

        $fullFile = null;
        if ($this->file != null) {

            $fullFile = 'data:'. $this->fileMime . ';base64,' .$this->file;
        }

        $view->vars['thumb'] = $thumb;
        $view->vars['fullFile'] = $fullFile;
//        $view->vars['thumb'] = 'none';
    }


}